{"ast":null,"code":"import { getPieces } from '../state/state.selector';\nimport * as PiecesActions from '../state/state.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nimport * as i2 from \"@angular/cdk/drag-drop\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"../board-piece/board-piece.component\";\n\nfunction BoardSquareComponent_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-board-piece\", 2);\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"piece\", ctx_r0.piece);\n  }\n}\n\nexport let BoardSquareComponent = /*#__PURE__*/(() => {\n  class BoardSquareComponent {\n    constructor(store, ref) {\n      this.store = store;\n      this.ref = ref;\n      this.column = '';\n      this.row = '';\n      this.color = '';\n      this.piece$ = this.store.select(getPieces);\n    } // Render piece on initialization.\n\n\n    ngOnInit() {\n      this.renderPiece();\n    } // Update respective board square dimensions after the view \n    // initializes.\n\n\n    ngAfterViewInit() {\n      this.updatePosition();\n    } // Updates the client location of the respective board square \n    // to allow for the drag and drop functionality.\n\n\n    updatePosition() {\n      const {\n        top,\n        right,\n        bottom,\n        left,\n        height,\n        x,\n        y\n      } = this.ref.nativeElement.getBoundingClientRect();\n      const newBoardSquare = {\n        square: `${this.column + this.row}`,\n        top,\n        right,\n        bottom,\n        left,\n        height,\n        x,\n        y\n      };\n      this.store.dispatch(PiecesActions.modifyBoardSquare({\n        boardSquare: newBoardSquare\n      }));\n    } // Renders piece if the respective board square has a piece\n    // located on it.\n\n\n    renderPiece() {\n      const index = this.column + this.row;\n      this.piece$.subscribe(pieces => {\n        this.piece = null;\n        pieces.map(piece => {\n          if (piece.location === index) {\n            this.piece = piece;\n          }\n        });\n      });\n    }\n\n  }\n\n  BoardSquareComponent.ɵfac = function BoardSquareComponent_Factory(t) {\n    return new (t || BoardSquareComponent)(i0.ɵɵdirectiveInject(i1.Store), i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n\n  BoardSquareComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: BoardSquareComponent,\n    selectors: [[\"app-board-square\"]],\n    inputs: {\n      column: \"column\",\n      row: \"row\",\n      color: \"color\"\n    },\n    decls: 2,\n    vars: 6,\n    consts: [[\"cdkDropList\", \"\", 3, \"id\", \"cdkDropListData\"], [3, \"ngIf\"], [3, \"piece\"]],\n    template: function BoardSquareComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵtemplate(1, BoardSquareComponent_ng_template_1_Template, 1, 1, \"ng-template\", 1);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵclassMapInterpolate1(\"board-square \", ctx.color, \"\");\n        i0.ɵɵpropertyInterpolate(\"id\", ctx.column + ctx.row);\n        i0.ɵɵproperty(\"cdkDropListData\", ctx.column + ctx.row);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.piece);\n      }\n    },\n    directives: [i2.CdkDropList, i3.NgIf, i4.BoardPieceComponent],\n    styles: [\".board-square[_ngcontent-%COMP%]{width:100%;height:100%;position:relative;display:inline-block}.white[_ngcontent-%COMP%]{background:white}.black[_ngcontent-%COMP%]{background:gray}.piece-box.piece-selected[_ngcontent-%COMP%]{background:yellow;cursor:pointer}.piece-box.piece-pointer[_ngcontent-%COMP%]{cursor:pointer}\"]\n  });\n  return BoardSquareComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}