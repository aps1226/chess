{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.KnightService = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nconst state_selector_1 = require(\"../state/state.selector\");\n\nconst columns_1 = require(\"../state/columns\");\n\nconst i0 = (0, tslib_1.__importStar)(require(\"@angular/core\"));\nconst i1 = (0, tslib_1.__importStar)(require(\"@ngrx/store\"));\n\nclass KnightService {\n  store;\n  boardSquare$;\n  boardSquares = [];\n\n  constructor(store) {\n    this.store = store;\n    this.boardSquare$ = this.store.select(state_selector_1.getBoardSquares);\n    this.boardSquare$.subscribe(boardSquare$ => this.boardSquares = [...boardSquare$]);\n  }\n\n  getViablePos(curPiece, pieces) {\n    const {\n      location\n    } = curPiece;\n    const res = [];\n    const col = location.split('')[0];\n    const row = Number(location.split('')[1]);\n    const curColNumber = columns_1.columns[col];\n    const cols = Object.values(columns_1.columns).sort((a, b) => a - b);\n    const curSquare = this.boardSquares.filter(({\n      square\n    }) => square === `${col + row}`)[0];\n    const topRightSquares = [`${String.fromCharCode(97 + curColNumber + 1) + (row + 2)}`, `${String.fromCharCode(97 + curColNumber + 2) + (row + 1)}`];\n    const backRightSquares = [`${String.fromCharCode(97 + curColNumber + 1) + (row - 2)}`, `${String.fromCharCode(97 + curColNumber + 2) + (row - 1)}`];\n    const backLeftSquares = [`${String.fromCharCode(97 + curColNumber - 1) + (row - 2)}`, `${String.fromCharCode(97 + curColNumber - 2) + (row - 1)}`];\n    const topLeftSquares = [`${String.fromCharCode(97 + curColNumber - 1) + (row + 2)}`, `${String.fromCharCode(97 + curColNumber - 2) + (row + 1)}`];\n    const posSquares = [...topRightSquares, ...backRightSquares, ...backLeftSquares, ...topLeftSquares];\n\n    for (const posSquare of posSquares) {\n      const pathObstructed = pieces.filter(({\n        location,\n        color\n      }) => {\n        return location === posSquare && color === curPiece.color;\n      })[0];\n      const squareExists = this.boardSquares.filter(({\n        square\n      }) => square === posSquare)[0];\n\n      if (!pathObstructed && squareExists) {\n        res.push(squareExists);\n      }\n    }\n\n    return res;\n  }\n\n  static ɵfac = function KnightService_Factory(t) {\n    return new (t || KnightService)(i0.ɵɵinject(i1.Store));\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: KnightService,\n    factory: KnightService.ɵfac,\n    providedIn: 'root'\n  });\n}\n\nexports.KnightService = KnightService;","map":null,"metadata":{},"sourceType":"script"}