{"ast":null,"code":"import { getBoardSquares } from '../state/state.selector';\nimport { columns } from '../state/columns';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nimport * as i2 from \"./rook.service\";\nimport * as i3 from \"./bishop.service\";\nexport let QueenService = /*#__PURE__*/(() => {\n  class QueenService {\n    constructor(store, rookService, bishopService) {\n      this.store = store;\n      this.rookService = rookService;\n      this.bishopService = bishopService;\n      this.boardSquares = [];\n      this.boardSquare$ = this.store.select(getBoardSquares);\n      this.boardSquare$.subscribe(boardSquare$ => this.boardSquares = [...boardSquare$]);\n    }\n\n    getViablePos(curPiece, pieces) {\n      const {\n        location,\n        color\n      } = curPiece;\n      const res = [];\n      const col = location.split('')[0];\n      const row = Number(location.split('')[1]);\n      const curColNumber = columns[col];\n      const cols = Object.values(columns).sort((a, b) => a - b);\n      const curSquare = this.boardSquares.filter(({\n        square\n      }) => square === `${col + row}`)[0]; // Queen movements are a combination of Rook's and bishop's.\n\n      res.push(...this.bishopService.getViablePos(curPiece, pieces), ...this.rookService.getViablePos(curPiece, pieces));\n      return res;\n    }\n\n  }\n\n  QueenService.ɵfac = function QueenService_Factory(t) {\n    return new (t || QueenService)(i0.ɵɵinject(i1.Store), i0.ɵɵinject(i2.RookService), i0.ɵɵinject(i3.BishopService));\n  };\n\n  QueenService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: QueenService,\n    factory: QueenService.ɵfac,\n    providedIn: 'root'\n  });\n  return QueenService;\n})();","map":null,"metadata":{},"sourceType":"module"}