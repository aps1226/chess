{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BishopService = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nconst state_selector_1 = require(\"../state/state.selector\");\n\nconst columns_1 = require(\"../state/columns\");\n\nconst i0 = (0, tslib_1.__importStar)(require(\"@angular/core\"));\nconst i1 = (0, tslib_1.__importStar)(require(\"@ngrx/store\"));\n\nclass BishopService {\n  store;\n  boardSquare$;\n  boardSquares = [];\n\n  constructor(store) {\n    this.store = store;\n    this.boardSquare$ = this.store.select(state_selector_1.getBoardSquares);\n    this.boardSquare$.subscribe(boardSquare$ => this.boardSquares = [...boardSquare$]);\n  }\n\n  getViablePos(curPiece, pieces) {\n    const {\n      color,\n      location\n    } = curPiece;\n    const res = [];\n    const col = location.split('')[0];\n    const row = Number(location.split('')[1]);\n    const curColNumber = columns_1.columns[col];\n    const cols = Object.values(columns_1.columns).sort((a, b) => a - b);\n    const curSquare = this.boardSquares.filter(({\n      square\n    }) => square === `${col + row}`)[0]; // Check top right diagonal.\n\n    for (let curCol = curColNumber + 1, curRow = row + 1; curCol <= cols[cols.length - 1] && curRow <= 8; curCol++, curRow++) {\n      const letter = String.fromCharCode(97 + curCol);\n      const curPos = letter + curRow;\n      const curSquare = this.boardSquares.filter(({\n        square\n      }) => square === curPos)[0];\n      const pathObstructed = pieces.filter(({\n        location\n      }) => {\n        return location === curPos;\n      })[0]; // Opponent piece exists in path.\n\n      if (pathObstructed) {\n        if (pathObstructed.color !== curPiece.color) {\n          res.push(curSquare);\n        }\n\n        break;\n      }\n\n      res.push(curSquare);\n    } // Check back right diagonal.\n\n\n    for (let curCol = curColNumber + 1, curRow = row - 1; curCol <= cols[cols.length - 1] && curRow >= 1; curCol++, curRow--) {\n      const letter = String.fromCharCode(97 + curCol);\n      const curPos = letter + curRow;\n      const curSquare = this.boardSquares.filter(({\n        square\n      }) => square === curPos)[0];\n      const pathObstructed = pieces.filter(({\n        location\n      }) => {\n        return location === curPos;\n      })[0]; // Opponent piece exists in path.\n\n      if (pathObstructed) {\n        if (pathObstructed.color !== curPiece.color) {\n          res.push(curSquare);\n        }\n\n        break;\n      }\n\n      res.push(curSquare);\n    } // Check back left diagonal.\n\n\n    for (let curCol = curColNumber - 1, curRow = row - 1; curCol >= cols[0] && curRow >= 1; curCol--, curRow--) {\n      const letter = String.fromCharCode(97 + curCol);\n      const curPos = letter + curRow;\n      const curSquare = this.boardSquares.filter(({\n        square\n      }) => square === curPos)[0];\n      const pathObstructed = pieces.filter(({\n        location\n      }) => {\n        return location === curPos;\n      })[0]; // Opponent piece exists in path.\n\n      if (pathObstructed) {\n        if (pathObstructed.color !== curPiece.color) {\n          res.push(curSquare);\n        }\n\n        break;\n      }\n\n      res.push(curSquare);\n    } // Check front left diagonal.\n\n\n    for (let curCol = curColNumber - 1, curRow = row + 1; curCol >= cols[0] && curRow <= 8; curCol--, curRow++) {\n      const letter = String.fromCharCode(97 + curCol);\n      const curPos = letter + curRow;\n      const curSquare = this.boardSquares.filter(({\n        square\n      }) => square === curPos)[0];\n      const pathObstructed = pieces.filter(({\n        location\n      }) => {\n        return location === curPos;\n      })[0]; // Opponent piece exists in path.\n\n      if (pathObstructed) {\n        if (pathObstructed.color !== curPiece.color) {\n          res.push(curSquare);\n        }\n\n        break;\n      }\n\n      res.push(curSquare);\n    }\n\n    return res;\n  }\n\n  static ɵfac = function BishopService_Factory(t) {\n    return new (t || BishopService)(i0.ɵɵinject(i1.Store));\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BishopService,\n    factory: BishopService.ɵfac,\n    providedIn: 'root'\n  });\n}\n\nexports.BishopService = BishopService;","map":null,"metadata":{},"sourceType":"script"}