{"ast":null,"code":"import { getBoardSquares } from '../state/state.selector';\nimport { columns } from '../state/columns';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nexport let PawnService = /*#__PURE__*/(() => {\n  class PawnService {\n    constructor(store) {\n      this.store = store;\n      this.boardSquares = [];\n      this.boardSquare$ = this.store.select(getBoardSquares);\n      this.boardSquare$.subscribe(boardSquare$ => this.boardSquares = [...boardSquare$]);\n    }\n\n    getViablePos(curPiece, pieces) {\n      const res = [];\n      const {\n        location,\n        color,\n        moved\n      } = curPiece;\n      const col = location.split('')[0];\n      const row = Number(location.split('')[1]);\n      res.push(...this.boardSquares.filter(({\n        square\n      }) => {\n        return color === 'white' && col + String(row + 1) === square || !moved && color === 'white' && col + String(row + 2) === square || color === 'black' && col + String(row - 1) === square || !moved && color === 'black' && col + String(row - 2) === square;\n      }).filter(({\n        square\n      }) => {\n        return !pieces.filter(({\n          location\n        }) => location == square && location !== curPiece.location || // Stop white pawn from jumping over another.\n        curPiece.color === 'white' && square === `${col + (row + 2)}` && location === `${col + (row + 1)}` || // Stop black pawn from jumping over another.\n        curPiece.color === 'black' && square === `${col + (row - 2)}` && location === `${col + (row - 1)}`).length;\n      }), ...this.attackDiagonal(curPiece, pieces, this.boardSquares, color, row, col));\n      return res;\n    }\n\n    attackDiagonal(curPiece, pieces, boardSquares, color, row, col) {\n      let targetRow;\n      let targetCol1;\n      let targetCol2;\n      const curColNumber = columns[col];\n      const targets = [];\n\n      if (color === 'white') {\n        targetRow = row + 1;\n      } else {\n        targetRow = row - 1;\n      }\n\n      const cols = [1, -1];\n\n      for (const col of cols) {\n        const letter = String.fromCharCode(97 + curColNumber + col);\n\n        if (columns[letter]) {\n          const targetPos = letter + targetRow;\n          targets.push(targetPos);\n        }\n      }\n\n      const res = [];\n\n      for (const target of targets) {\n        if (pieces.filter(piece => piece.location === target && piece.color !== curPiece.color).length) {\n          res.push(...boardSquares.filter(({\n            square\n          }) => square === target));\n        }\n      }\n\n      return res;\n    }\n\n    positionsOfCheck(pawn, boardSquares) {\n      const {\n        color,\n        location\n      } = pawn;\n      const col = location.split('')[0];\n      const curColNumber = columns[col];\n      const row = Number(location.split('')[1]);\n      const posOfCheck = []; // Add current position.\n\n      const curSquare = boardSquares.filter(({\n        square\n      }) => square === pawn.location)[0];\n      posOfCheck.push(curSquare);\n      const diagonals = []; // If the pawn is a white piece, add respective diagonals\n      // to the positions of check array.\n\n      if (color === 'white') {\n        diagonals.push(`${String.fromCharCode(97 + curColNumber + 1) + (row + 1)}`, `${String.fromCharCode(97 + curColNumber - 1) + (row + 1)}`);\n      } // If the pawn is a black piece, add respective diagonals\n      // to the positions of check array.\n\n\n      if (color === 'black') {\n        diagonals.push(`${String.fromCharCode(97 + curColNumber + 1) + (row - 1)}`, `${String.fromCharCode(97 + curColNumber - 1) + (row - 1)}`);\n      }\n\n      for (const diagonal of diagonals) {\n        const curSquare = boardSquares.filter(({\n          square\n        }) => square === diagonal)[0];\n\n        if (curSquare) {\n          posOfCheck.push(curSquare);\n        }\n      }\n\n      return posOfCheck;\n    }\n\n  }\n\n  PawnService.ɵfac = function PawnService_Factory(t) {\n    return new (t || PawnService)(i0.ɵɵinject(i1.Store));\n  };\n\n  PawnService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PawnService,\n    factory: PawnService.ɵfac\n  });\n  return PawnService;\n})();","map":null,"metadata":{},"sourceType":"module"}