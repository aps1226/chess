{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.castleReducer = exports.selectionReducer = exports.gameStatusReducer = exports.boardSquaresReducer = exports.turnsReducer = exports.piecesReducer = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nconst store_1 = require(\"@ngrx/store\");\n\nconst PiecesActions = (0, tslib_1.__importStar)(require(\"./state.actions\"));\n\nconst pieces_1 = require(\"./pieces\");\n\nconst boardSquares_1 = require(\"./boardSquares\");\n\nconst nextPlayersTurn = pieces => {\n  pieces.forEach;\n};\n\nconst initialPieces = [...pieces_1.pieces];\nexports.piecesReducer = (0, store_1.createReducer)(initialPieces, (0, store_1.on)(PiecesActions.modifyPiece, (state, {\n  piece,\n  turns\n}) => {\n  console.log(piece);\n  const playersTurn = turns % 2 === 0 ? 'black' : 'white';\n  const newState = [...state.filter(({\n    name\n  }) => name !== piece.name), piece].map(item => {\n    return { ...item,\n      ...{\n        draggable: item.color === playersTurn\n      }\n    };\n  });\n  return newState;\n}), (0, store_1.on)(PiecesActions.modifyPieces, (state, {\n  pieces\n}) => {\n  return [...pieces];\n}), (0, store_1.on)(PiecesActions.removePiece, (state, {\n  pieceName\n}) => {\n  return [...state.filter(({\n    name\n  }) => name !== pieceName)];\n}));\nconst initialTurns = 0;\nexports.turnsReducer = (0, store_1.createReducer)(initialTurns, (0, store_1.on)(PiecesActions.incrementTurn, state => state + 1));\nconst initialBoardSquares = [...boardSquares_1.boardSquares];\nexports.boardSquaresReducer = (0, store_1.createReducer)(initialBoardSquares, (0, store_1.on)(PiecesActions.modifyBoardSquare, (state, {\n  boardSquare\n}) => {\n  return [...state.filter(({\n    square\n  }) => square !== boardSquare.square), boardSquare];\n}));\nconst initialGameStatus = {\n  'white': {\n    'check': false,\n    'checkMate': false\n  },\n  'black': {\n    'check': false,\n    'checkMate': false\n  }\n};\nexports.gameStatusReducer = (0, store_1.createReducer)(initialGameStatus, (0, store_1.on)(PiecesActions.modifyGameStatus, (state, {\n  gameStatus\n}) => {\n  return gameStatus;\n}));\nconst initialSelection = { ...pieces_1.pieces[0],\n  moves: [initialBoardSquares[0]]\n};\nexports.selectionReducer = (0, store_1.createReducer)(initialSelection, (0, store_1.on)(PiecesActions.modifySelection, (state, {\n  selection\n}) => {\n  return selection;\n}));\nconst initialCastle = {\n  'white': {\n    'rook': null,\n    'king': null\n  },\n  'black': {\n    'rook': null,\n    'king': null\n  }\n};\nexports.castleReducer = (0, store_1.createReducer)(initialCastle, (0, store_1.on)(PiecesActions.modifyCastle, (state, {\n  piece\n}) => {\n  const {\n    color\n  } = piece;\n  const newState = {\n    'white': { ...state['white']\n    },\n    'black': { ...state['black']\n    }\n  };\n\n  switch (color) {\n    case 'white':\n      newState.white[piece.type] = piece;\n      break;\n\n    case 'black':\n      newState.black[piece.type] = piece;\n      break;\n\n    default:\n      break;\n  }\n\n  return newState;\n}));","map":null,"metadata":{},"sourceType":"script"}