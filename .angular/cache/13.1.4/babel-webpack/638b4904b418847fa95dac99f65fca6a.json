{"ast":null,"code":"import { getBoardSquares } from '../state/state.selector';\nimport { columns } from '../state/columns';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nexport let RookService = /*#__PURE__*/(() => {\n  class RookService {\n    constructor(store) {\n      this.store = store;\n      this.boardSquares = [];\n      this.boardSquare$ = this.store.select(getBoardSquares);\n      this.boardSquare$.subscribe(boardSquare$ => this.boardSquares = [...boardSquare$]);\n    }\n\n    getViablePos(curPiece, pieces) {\n      const {\n        color,\n        location\n      } = curPiece;\n      const res = [];\n      const col = location.split('')[0];\n      const row = Number(location.split('')[1]);\n      const curColNumber = columns[col];\n      const cols = Object.values(columns).sort((a, b) => a - b);\n      const curSquare = this.boardSquares.filter(({\n        square\n      }) => square === `${col + row}`)[0]; // Check left.\n\n      for (let i = curColNumber - 1; i >= cols[0]; i--) {\n        const letter = String.fromCharCode(97 + i);\n        const curPos = letter + row;\n        const curSquare = this.boardSquares.filter(({\n          square\n        }) => square === curPos)[0];\n        const pathObstructed = pieces.filter(({\n          location\n        }) => {\n          return location === curPos;\n        })[0]; // Opponent piece exists in path.\n\n        if (pathObstructed) {\n          if (pathObstructed.color !== curPiece.color) {\n            res.push(curSquare);\n          }\n\n          break;\n        }\n\n        res.push(curSquare);\n      } // Check right.\n\n\n      for (let i = curColNumber + 1; i <= cols[cols.length - 1]; i++) {\n        const letter = String.fromCharCode(97 + i);\n        const curPos = letter + row;\n        const curSquare = this.boardSquares.filter(({\n          square\n        }) => square === curPos)[0];\n        const pathObstructed = pieces.filter(({\n          location\n        }) => {\n          return location === curPos;\n        })[0]; // Opponent piece exists in path.\n\n        if (pathObstructed) {\n          if (pathObstructed.color !== curPiece.color) {\n            res.push(curSquare);\n          }\n\n          break;\n        }\n\n        res.push(curSquare);\n      } // Check down.\n\n\n      for (let i = row - 1; i >= 1; i--) {\n        const curPos = col + i;\n        const curSquare = this.boardSquares.filter(({\n          square\n        }) => square === curPos)[0];\n        const pathObstructed = pieces.filter(({\n          location\n        }) => {\n          return location === curPos;\n        })[0]; // Opponent piece exists in path.\n\n        if (pathObstructed) {\n          if (pathObstructed.color !== curPiece.color) {\n            res.push(curSquare);\n          }\n\n          break;\n        }\n\n        res.push(curSquare);\n      } // Check up.\n\n\n      for (let i = row + 1; i <= 8; i++) {\n        const curPos = col + i;\n        const curSquare = this.boardSquares.filter(({\n          square\n        }) => square === curPos)[0];\n        const pathObstructed = pieces.filter(({\n          location\n        }) => {\n          return location === curPos;\n        })[0]; // Opponent piece exists in path.\n\n        if (pathObstructed) {\n          if (pathObstructed.color !== curPiece.color) {\n            res.push(curSquare);\n          }\n\n          break;\n        }\n\n        res.push(curSquare);\n      }\n\n      return res;\n    }\n\n  }\n\n  RookService.ɵfac = function RookService_Factory(t) {\n    return new (t || RookService)(i0.ɵɵinject(i1.Store));\n  };\n\n  RookService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RookService,\n    factory: RookService.ɵfac,\n    providedIn: 'root'\n  });\n  return RookService;\n})();","map":null,"metadata":{},"sourceType":"module"}