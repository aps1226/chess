{"ast":null,"code":"import { getBoardSquares } from '../state/state.selector';\nimport { columns } from '../state/columns';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nexport let BishopService = /*#__PURE__*/(() => {\n  class BishopService {\n    constructor(store) {\n      this.store = store;\n      this.boardSquares = [];\n      this.boardSquare$ = this.store.select(getBoardSquares);\n      this.boardSquare$.subscribe(boardSquare$ => this.boardSquares = [...boardSquare$]);\n    }\n\n    getViablePos(curPiece, pieces) {\n      const {\n        color,\n        location\n      } = curPiece;\n      const res = [];\n      const col = location.split('')[0];\n      const row = Number(location.split('')[1]);\n      const curColNumber = columns[col];\n      const cols = Object.values(columns).sort((a, b) => a - b);\n      const curSquare = this.boardSquares.filter(({\n        square\n      }) => square === `${col + row}`)[0]; // Check top right diagonal.\n\n      for (let curCol = curColNumber + 1, curRow = row + 1; curCol <= cols[cols.length - 1] && curRow <= 8; curCol++, curRow++) {\n        const letter = String.fromCharCode(97 + curCol);\n        const curPos = letter + curRow;\n        const curSquare = this.boardSquares.filter(({\n          square\n        }) => square === curPos)[0];\n        const pathObstructed = pieces.filter(({\n          location\n        }) => {\n          return location === curPos;\n        })[0]; // Opponent piece exists in path.\n\n        if (pathObstructed) {\n          if (pathObstructed.color !== curPiece.color) {\n            res.push(curSquare);\n          }\n\n          break;\n        }\n\n        res.push(curSquare);\n      } // Check back right diagonal.\n\n\n      for (let curCol = curColNumber + 1, curRow = row - 1; curCol <= cols[cols.length - 1] && curRow >= 1; curCol++, curRow--) {\n        const letter = String.fromCharCode(97 + curCol);\n        const curPos = letter + curRow;\n        const curSquare = this.boardSquares.filter(({\n          square\n        }) => square === curPos)[0];\n        const pathObstructed = pieces.filter(({\n          location\n        }) => {\n          return location === curPos;\n        })[0]; // Opponent piece exists in path.\n\n        if (pathObstructed) {\n          if (pathObstructed.color !== curPiece.color) {\n            res.push(curSquare);\n          }\n\n          break;\n        }\n\n        res.push(curSquare);\n      } // Check back left diagonal.\n\n\n      for (let curCol = curColNumber - 1, curRow = row - 1; curCol >= cols[0] && curRow >= 1; curCol--, curRow--) {\n        const letter = String.fromCharCode(97 + curCol);\n        const curPos = letter + curRow;\n        const curSquare = this.boardSquares.filter(({\n          square\n        }) => square === curPos)[0];\n        const pathObstructed = pieces.filter(({\n          location\n        }) => {\n          return location === curPos;\n        })[0]; // Opponent piece exists in path.\n\n        if (pathObstructed) {\n          if (pathObstructed.color !== curPiece.color) {\n            res.push(curSquare);\n          }\n\n          break;\n        }\n\n        res.push(curSquare);\n      } // Check front left diagonal.\n\n\n      for (let curCol = curColNumber - 1, curRow = row + 1; curCol >= cols[0] && curRow <= 8; curCol--, curRow++) {\n        const letter = String.fromCharCode(97 + curCol);\n        const curPos = letter + curRow;\n        const curSquare = this.boardSquares.filter(({\n          square\n        }) => square === curPos)[0];\n        const pathObstructed = pieces.filter(({\n          location\n        }) => {\n          return location === curPos;\n        })[0]; // Opponent piece exists in path.\n\n        if (pathObstructed) {\n          if (pathObstructed.color !== curPiece.color) {\n            res.push(curSquare);\n          }\n\n          break;\n        }\n\n        res.push(curSquare);\n      }\n\n      return res;\n    }\n\n  }\n\n  BishopService.ɵfac = function BishopService_Factory(t) {\n    return new (t || BishopService)(i0.ɵɵinject(i1.Store));\n  };\n\n  BishopService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BishopService,\n    factory: BishopService.ɵfac,\n    providedIn: 'root'\n  });\n  return BishopService;\n})();","map":null,"metadata":{},"sourceType":"module"}