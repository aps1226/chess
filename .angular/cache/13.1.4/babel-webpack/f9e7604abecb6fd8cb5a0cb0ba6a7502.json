{"ast":null,"code":"import { getBoardSquares } from '../state/state.selector';\nimport { columns } from '../state/columns';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nexport let KnightService = /*#__PURE__*/(() => {\n  class KnightService {\n    constructor(store) {\n      this.store = store;\n      this.boardSquares = [];\n      this.boardSquare$ = this.store.select(getBoardSquares);\n      this.boardSquare$.subscribe(boardSquare$ => this.boardSquares = [...boardSquare$]);\n    }\n\n    getViablePos(curPiece, pieces) {\n      const {\n        location\n      } = curPiece;\n      const res = [];\n      const col = location.split('')[0];\n      const row = Number(location.split('')[1]);\n      const curColNumber = columns[col];\n      const cols = Object.values(columns).sort((a, b) => a - b);\n      const curSquare = this.boardSquares.filter(({\n        square\n      }) => square === `${col + row}`)[0];\n      const topRightSquares = [`${String.fromCharCode(97 + curColNumber + 1) + (row + 2)}`, `${String.fromCharCode(97 + curColNumber + 2) + (row + 1)}`];\n      const backRightSquares = [`${String.fromCharCode(97 + curColNumber + 1) + (row - 2)}`, `${String.fromCharCode(97 + curColNumber + 2) + (row - 1)}`];\n      const backLeftSquares = [`${String.fromCharCode(97 + curColNumber - 1) + (row - 2)}`, `${String.fromCharCode(97 + curColNumber - 2) + (row - 1)}`];\n      const topLeftSquares = [`${String.fromCharCode(97 + curColNumber - 1) + (row + 2)}`, `${String.fromCharCode(97 + curColNumber - 2) + (row + 1)}`];\n      const posSquares = [...topRightSquares, ...backRightSquares, ...backLeftSquares, ...topLeftSquares];\n\n      for (const posSquare of posSquares) {\n        const pathObstructed = pieces.filter(({\n          location,\n          color\n        }) => {\n          return location === posSquare && color === curPiece.color;\n        })[0];\n        const squareExists = this.boardSquares.filter(({\n          square\n        }) => square === posSquare)[0];\n\n        if (!pathObstructed && squareExists) {\n          res.push(squareExists);\n        }\n      }\n\n      return res;\n    }\n\n  }\n\n  KnightService.ɵfac = function KnightService_Factory(t) {\n    return new (t || KnightService)(i0.ɵɵinject(i1.Store));\n  };\n\n  KnightService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: KnightService,\n    factory: KnightService.ɵfac,\n    providedIn: 'root'\n  });\n  return KnightService;\n})();","map":null,"metadata":{},"sourceType":"module"}