{"ast":null,"code":"import { createReducer, on } from '@ngrx/store';\nimport * as PiecesActions from './state.actions';\nimport { pieces } from './pieces';\nimport { boardSquares } from './boardSquares';\n\nconst nextPlayersTurn = pieces => {\n  pieces.forEach;\n};\n\nconst initialPieces = [...pieces];\nexport const piecesReducer = createReducer(initialPieces, on(PiecesActions.modifyPiece, (state, {\n  piece,\n  turns\n}) => {\n  console.log(piece);\n  const playersTurn = turns % 2 === 0 ? 'black' : 'white';\n  const newState = [...state.filter(({\n    name\n  }) => name !== piece.name), piece].map(item => {\n    return Object.assign(Object.assign({}, item), {\n      draggable: item.color === playersTurn\n    });\n  });\n  return newState;\n}), on(PiecesActions.modifyPieces, (state, {\n  pieces\n}) => {\n  return [...pieces];\n}), on(PiecesActions.removePiece, (state, {\n  pieceName\n}) => {\n  return [...state.filter(({\n    name\n  }) => name !== pieceName)];\n}));\nconst initialTurns = 0;\nexport const turnsReducer = createReducer(initialTurns, on(PiecesActions.incrementTurn, state => state + 1));\nconst initialBoardSquares = [...boardSquares];\nexport const boardSquaresReducer = createReducer(initialBoardSquares, on(PiecesActions.modifyBoardSquare, (state, {\n  boardSquare\n}) => {\n  return [...state.filter(({\n    square\n  }) => square !== boardSquare.square), boardSquare];\n}));\nconst initialGameStatus = {\n  'white': {\n    'check': false,\n    'checkMate': false\n  },\n  'black': {\n    'check': false,\n    'checkMate': false\n  }\n};\nexport const gameStatusReducer = createReducer(initialGameStatus, on(PiecesActions.modifyGameStatus, (state, {\n  gameStatus\n}) => {\n  return gameStatus;\n}));\nconst initialSelection = Object.assign(Object.assign({}, pieces[0]), {\n  moves: [initialBoardSquares[0]]\n});\nexport const selectionReducer = createReducer(initialSelection, on(PiecesActions.modifySelection, (state, {\n  selection\n}) => {\n  return selection;\n}));\nconst initialCastle = {\n  'white': {\n    'rook': null,\n    'king': null\n  },\n  'black': {\n    'rook': null,\n    'king': null\n  }\n};\nexport const castleReducer = createReducer(initialCastle, on(PiecesActions.modifyCastle, (state, {\n  piece\n}) => {\n  const {\n    color\n  } = piece;\n  const newState = {\n    'white': Object.assign({}, state['white']),\n    'black': Object.assign({}, state['black'])\n  };\n\n  switch (color) {\n    case 'white':\n      newState.white[piece.type] = piece;\n      break;\n\n    case 'black':\n      newState.black[piece.type] = piece;\n      break;\n\n    default:\n      break;\n  }\n\n  return newState;\n}));","map":null,"metadata":{},"sourceType":"module"}